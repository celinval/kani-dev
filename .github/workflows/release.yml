# Copyright Kani Contributors
# SPDX-License-Identifier: Apache-2.0 OR MIT
name: Release Bundle
on:
  pull_request:
  push:
    branches:
      - '**'
    tags:
      - kani-*

env:
  RUST_BACKTRACE: 1

jobs:
  ReleaseBundle-MacOs:
    name: ReleaseBundle-MacOs
    runs-on: macos-12
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Kani Dependencies
        uses: ./.github/actions/setup
        with:
          os: macos-12

      - name: Export tag version
        if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') }}
        run: |
          echo "VERSION=${TAG_VERSION}" >> $GITHUB_ENV

      - name: Export latest version
        if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
        run: |
          echo "VERSION=latest" >> $GITHUB_ENV

      - name: Build bundle
        run: |
          cargo bundle -- ${{ env.VERSION }}
          cargo package -p kani-verifier
          cp target/package/kani-verifier*.crate macos-kani-verifier.crate

      - name: Export variables
        run: |
          echo "BUNDLE=kani-${{ env.VERSION }}-x86_64-apple-darwin.tar.gz" >> $GITHUB_ENV
          echo "bundle=${{ env.BUNDLE }}" >> $GITHUB_OUTPUT

      - name: Upload bundle
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.BUNDLE }}
          path: ${{ env.BUNDLE }}
          if-no-files-found: error
          # Aggressively short retention: we don't really need these
          retention-days: 3

      - name: Upload kani-verifier pkg
        uses: actions/upload-artifact@v3
        with:
          name: macos-kani-verifier.crate
          path: macos-kani-verifier.crate
          if-no-files-found: error
          # Aggressively short retention: we don't really need these
          retention-days: 3

  TestBundle-MacOs:
    name: TestBundle-MacOs
    needs: ReleaseBundle-MacOs
    runs-on: macos-12
    steps:
      - name: Download bundle
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.ReleaseBundle-MacOs.outputs.bundle }}

      - name: Download kani-verifier crate
        uses: actions/download-artifact@v3
        with:
          name: macos-kani-verifier.crate

      - name: Install from bundle
        run: |
          tar xf macos-kani-verifier.crate
          cargo install --locked kani-verifier-*
          cargo kani setup --use-local-bundle ./${{ needs.ReleaseBundle-MacOs.outputs.bundle }}

      - name: Checkout tests
        uses: actions/checkout@v3
        with:
          path: kani_src

      - name: Run tests
        # TODO: Customize compiletest to run custom kani. For now, just run a cargo kani test.
        run: |
          pushd kani_src/tests/cargo_kani/simple-lib
          cargo kani


  ReleaseBundle-Linux:
    name: ReleaseBundle-Linux
    runs-on: ubuntu-20.04
    container:
      # Build using ubuntu 18 due to compatibility issues with older OS.
      image: ubuntu:18.04
      volumes:
        - /usr/local:/mnt/host-local
    steps:
      - name: Remove unnecessary software to free up disk space
        run: |
          # inspired by https://github.com/easimon/maximize-build-space/blob/master/action.yml
          df -h
          rm -r /mnt/host-local/lib/android /mnt/host-local/.ghcup
          df -h
      # This is required before checkout because the container does not
      # have Git installed, so cannot run checkout action. The checkout
      # action requires Git >=2.18, so use the Git maintainers' PPA.
      - name: Install system dependencies
        run: |
          apt-get update
          apt-get install -y software-properties-common apt-utils
          add-apt-repository ppa:git-core/ppa
          apt-get update
          apt-get install -y \
            build-essential bash-completion curl lsb-release sudo g++ gcc flex \
            bison make patch git

      - name: Checkout Kani
        uses: actions/checkout@v3

      - name: Setup Kani Dependencies
        uses: ./.github/actions/setup
        with:
          os: ubuntu-18.04

      - name: Export tag version
        if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') }}
        run: |
          echo "VERSION=${TAG_VERSION}" >> $GITHUB_ENV

      - name: Export latest version
        if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
        run: |
          echo "VERSION=latest" >> $GITHUB_ENV

      - name: Build bundle
        run: |
          PATH=/github/home/.cargo/bin:$PATH cargo bundle -- ${{ env.VERSION }}
          PATH=/github/home/.cargo/bin:$PATH cargo package -p kani-verifier
          cp target/package/kani-verifier*.crate linux-kani-verifier.crate

      - name: Upload bundle
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.BUNDLE }}
          path: ${{ env.BUNDLE }}
          if-no-files-found: error
          # Aggressively short retention: we don't really need these
          retention-days: 3

      - name: Upload kani-verifier pkg
        uses: actions/upload-artifact@v3
        with:
          name: linux-kani-verifier.crate
          path: linux-kani-verifier.crate
          if-no-files-found: error
          # Aggressively short retention: we don't really need these
          retention-days: 3

  TestBundle-Linux:
    # TODO: Maybe run a matrix for each image...
    # Note that we need to change how the bundle upload the crate or maybe just make part of this job.
    name: TestBundle-Linux
    needs: ReleaseBundle-Linux
    runs-on: ubuntu-20.04
    steps:
      - name: TODO
        run: |
          echo "TODO"
          exit 1

  Release:
    if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') }}
    name: Release
    runs-on: ubuntu-20.04
    needs: [ReleaseBundle-MacOs, ReleaseBundle-Linux, TestBundle-MacOs, TestBundle-Linux]
    permissions:
      contents: write
    outputs:
      version: ${{ steps.versioning.outputs.version }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get version
        run: |
          # pkgid is something like file:///home/ubuntu/kani#kani-verifier:0.1.0
          echo "CRATE_VERSION=$(cargo pkgid | cut -d@ -f2)" >> $GITHUB_ENV
          # GITHUB_REF is refs/tags/kani-0.1.0
          echo "TAG_VERSION=$(echo ${{ github.ref }} | cut -d "-" -f 2)" >> $GITHUB_ENV

      - name: Check Version
        id: versioning
        run: |
          # Validate git tag & Cargo.toml are in sync on version number
          if [[ ${{ env.CRATE_VERSION }} != ${{ env.TAG_VERSION }} ]]; then
            echo "Git tag ${{env.TAG_VERSION}} did not match crate version ${{env.CRATE_VERSION}}"
            exit 1
          fi

      - name: Download MacOS bundle
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.ReleaseBundle-MacOs.outputs.bundle }}

      - name: Download Linux bundle
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.ReleaseBundle-Linux.outputs.bundle }}

      - name: Create release
        id: create_release
        uses: ncipollo/release-action@v1.12.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: kani-${{ env.TAG_VERSION }}
          tag: kani-${{ env.TAG_VERSION }}
          artifacts: "${{ needs.ReleaseBundle-Linux.outputs.bundle }},${{ needs.ReleaseBundle-MacOs.outputs.bundle }}"
          body: |
            Kani Rust verifier release bundle version ${{ env.TAG_VERSION }}.
          draft: true

  # TODO: Why do we need this?
  Package-Docker:
    name: 'Package Docker'
    needs: Release
    runs-on: ubuntu-20.04
    permissions:
      contents: write
      packages: write
    env:
      os: ubuntu-20.04
      target: x86_64-unknown-linux-gnu
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Kani Dependencies
        uses: ./.github/actions/setup
        with:
          os: ubuntu-20.04

      - name: 'Build release bundle'
        run: |
          cargo bundle
          cargo package -p kani-verifier

      - name: 'Login to GitHub Container Registry'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 'Set lower case owner name. Needed for docker push.'
        run: |
          echo "OWNER_LC=${OWNER,,}" >>${GITHUB_ENV}
        env:
          OWNER: '${{ github.repository_owner }}'

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          file: scripts/ci/Dockerfile.bundle-release-20-04
          push: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
          tags: |
            ghcr.io/${{ env.OWNER_LC }}/kani-${{ env.os }}:${{ needs.Release.outputs.version }}
            ghcr.io/${{ env.OWNER_LC }}/kani-${{ env.os }}:latest
          labels: |
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.version=${{ needs.Release.outputs.version }}
            org.opencontainers.image.licenses=Apache-2.0 OR MIT

      # This check will not work until #1655 is completed.
      # - name: Check action and image is updated.
      #   uses: ./.
      #   with:
      #     command: |
      #       [[ "$(cargo kani --version)" == 'cargo-kani ${{ needs.Release.outputs.version }}' ]]
